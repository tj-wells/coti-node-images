name: Build Image & Push to Dockerhub

on:
  schedule:
    - cron: '*/5 * * * *'
    # https://github.blog/changelog/2019-11-01-github-actions-scheduled-jobs-maximum-frequency-is-changing/
  push:
    branches:
      - 'master'

env:
  DOCKERHUB_USERNAME: atomnode
  IMAGE_NAME: coti-node

jobs:
  check-for-new-release:
    name: Check for new release
    runs-on: ubuntu-latest
    steps:
      - name: Compare versions
        id: compare-latest-release-with-readme
        shell: python
        run: |
          import os
          import requests
          from requests.adapters import HTTPAdapter, Retry

          def return_json(url):
            s = requests.Session()
            retries = Retry(total=10, backoff_factor=1, status_forcelist=tuple(x for x in requests.status_codes._codes if x != 200))
            s.mount('https://', HTTPAdapter(max_retries=retries))
            response = s.get(url)
            return response.json()

          latest_release = return_json("https://api.github.com/repos/coti-io/coti-node/releases/latest")['tag_name']
          available_images = [d['name'] for d in return_json("https://hub.docker.com/v2/repositories/${{env.DOCKERHUB_USERNAME}}/${{env.IMAGE_NAME}}/tags")['results']]
          latest_image = available_images[1]

          if latest_release in available_images:
            is_new_release = "❌"
            print(f"✨ No new release found. The latest release is {latest_release} and the latest image version is {latest_image}. No build needed. This workflow run has completed successfully.")
          elif latest_release not in available_images:
            is_new_release = "✅"
            print(f"✅ New release found (version {latest_release}).")
          else:
            print("Error")

          # Write results to github env
          with open(os.environ.get('GITHUB_ENV'), 'a') as gh_envs:
            gh_envs.write(f'IS_NEW_RELEASE={is_new_release}\n')
            gh_envs.write(f'RELEASE_VERSION={latest_release}\n')
    outputs:
      is-new-release: ${{env.IS_NEW_RELEASE}}
      release-version: ${{env.RELEASE_VERSION}}

  build-and-push:
    name: Build and push new release
    runs-on: ubuntu-latest
    needs: [check-for-new-release]
    if: ${{ needs.check-for-new-release.outputs.is-new-release == '✅' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          username: ${{env.DOCKERHUB_USERNAME}}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{env.DOCKERHUB_USERNAME}}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=semver,pattern={{version}},value=${{needs.check-for-new-release.outputs.release-version}}

      - name: Modify coti-node Repository
        run: |
          git clone https://github.com/coti-io/coti-node --branch ${{ needs.check-for-new-release.outputs.release-version }}
          cp update-env coti-node

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./coti-node
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            MODULE=fullnode
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
