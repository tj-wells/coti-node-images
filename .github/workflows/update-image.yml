name: Build Docker Container & Push to Registry

on:
  schedule:
    - cron: '0 9 * * *'
    # Runs once a day at 9 am
  push:
    branches:
      - 'master'

env:
  DOCKERHUB_USERNAME: atomnode
  IMAGE_NAME: coti-node

jobs:
  check-for-new-release:
    runs-on: ubuntu-latest
    steps:
      - name: Install zsh
        run: sudo apt-get update; sudo apt-get install zsh
      - name: Compare versions
        id: compare-latest-release-with-readme
        shell: zsh {0}
        run: |
          LATEST_RELEASE=$(curl -sL https://api.github.com/repos/coti-io/coti-node/releases/latest | jq ".tag_name")
          EXISTING_VERSIONS=$(curl -L -s 'https://hub.docker.com/v2/repositories/${{env.DOCKERHUB_USERNAME}}/${{env.IMAGE_NAME}}/tags'|jq '."results"[]["name"]')
          IS_NEW_RELEASE=$(if [[ $EXISTING_VERSIONS == *"$LATEST_RELEASE"* ]]; then echo "❌"; else echo "✅"; fi)
          echo "IS_NEW_RELEASE=$IS_NEW_RELEASE" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$LATEST_RELEASE" >> $GITHUB_ENV
          if [[ $IS_NEW_RELEASE == "✅" ]]; then
            echo "New release found (version $LATEST_RELEASE)."
          elif [[ $IS_NEW_RELEASE == "❌" ]]; then
            echo "No new release found. Workflow run has completed successfully."
          fi
    outputs:
      is-new-release: ${{env.IS_NEW_RELEASE}}
      release-version: ${{env.RELEASE_VERSION}}

  build-and-push:
    runs-on: ubuntu-latest
    needs: [check-for-new-release]
    if: ${{ needs.check-for-new-release.outputs.is-new-release == '✅' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          username: ${{env.DOCKERHUB_USERNAME}}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{env.DOCKERHUB_USERNAME}}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},value=${{needs.check-for-new-release.outputs.release-version}}

      - name: Modify coti-node Repository
        run: |
          git clone https://github.com/coti-io/coti-node --branch ${{ needs.check-for-new-release.outputs.release-version }}
          cp update-env coti-node

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./coti-node
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            MODULE=fullnode
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
